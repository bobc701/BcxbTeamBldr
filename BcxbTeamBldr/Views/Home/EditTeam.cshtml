@model BcxbTeamBldr.Models.CUserTeam

@{
   int teamID = Model.TeamSpecs.UserTeamID;
   string teamName = Model.TeamSpecs.TeamName;
   string userName = Model.TeamSpecs.UserName;
}

   <h2>Edit rosters and lineups</h2>

   <h5>
      User: @Html.TextBoxFor(
         m => m.TeamSpecs.UserName,
         new { id = "txtUserName", @readonly = "readonly", style = "border:none; font-weight:bold;" })<br />
   </h5>

   <div style="font-weight:bold; ">

      Team name: @Html.TextBoxFor(
         m => m.TeamSpecs.TeamName,
         new { id = "txtTeamName", @readonly = "readonly", style = "font-weight:bold; margin: 0px 0px 15px 0px;" })


      @*@Html.ActionLink("Save Name", "UpdUserTeamSpecs",
          new { userName = Model.TeamSpecs.UserName, teamID = Model.TeamSpecs.UserTeamID, teamName = Model.TeamSpecs.TeamName },
          new { disabled="disabled" })*@

      <a id="btnEditName" href="#">Edit name and DH</a>

      <br/>Uses DH at home: @Html.CheckBoxFor(m => m.TeamSpecs.UsesDh, new { id = "chkUsesDh", @readonly = "readonly" })

      @Html.HiddenFor(m => m.TeamSpecs.UserTeamID, new { id = "txtTeamID" })
   </div>

   <div class="shadowed-text">
      <em>
         @*You must enter default starting lineups for both DH and no-DH.*@
         @*The lineups can always be changed at game-time in Play-by-Play Baseball.*@
         Players may play any position, but if a the position is not listed in 'Positions',
         <br />then he's not qualified there and will be a defensive liability.
         <br />Batting order and fielding positions can be set at game-time in Play-by-Play Baseball.
      </em>
   </div>
   <p />

   <div>
      @if (Model.TeamSpecs.IsComplete) {
         <div style="color:limegreen; font-weight:bold">
            <img src="~/Images/checkBox_checked2.png" style="width:15px; height:15px;" />&nbsp;
            @Model.TeamSpecs.StatusMsg
         </div>
            <text><em>(You may still add up to 25 players.)</em></text>
      }
      else {
         <div class="errorMsg2">
            <img src="~/Images/checkBox_unchecked2.png" style="width:15px; height:15px;" />&nbsp;
            @Model.TeamSpecs.StatusMsg
         </div>
      }

      <table id="currRoster" class="tablefmt2" style="margin: 0px 0px 20px 0px;">
         <tr>
            <th align="left">Player Name</th>
            <th align="left">MLB Team</th>
            <th align="center">Year</th>
            <th align="left">Positions</th>
            <th width="70" align="center" style="display:none">Lineup<br />No DH</th>
            <th width="70" align="center" style="display: none">Position<br />No DH</th>
            <th width="70" align="center" style="display: none">Lineup<br />DH</th>
            <th width="70" align="center" style="display: none">Position<br />DH</th>
            <th width="70" align="center"></th>
         </tr>
         @for (var i = 0; i < Model.Roster.Count; i++) {
            <tr>
               <td>@Html.TextBoxFor(m => m.Roster[i].PlayerName, new { @class = "playerName", @readonly = "readonly", style = "width:120px; background-color:white; border:none;" })</td>
               <td>@Html.TextBoxFor(m => m.Roster[i].teamTag, new { @class = "teamTag", @readonly = "readonly", style = "width:80px; background-color:white; border:none;" })</td>
               <td align="center">@Html.TextBoxFor(m => m.Roster[i].year, new { @class = "year", @readonly = "readonly", style = "width:80px; background-color:white; border:none;" })</td>
               <td class="fieldingString">@Model.Roster[i].FieldingString</td>

               <td align="center" style="display: none;">
                  @Html.DropDownListFor(
                    m => m.Roster[i].Slot_NoDH,
                    new SelectList(
                       //new List<string> { "-", "c", "1b" })
                       new List<SelectListItem>  {
                                          new SelectListItem { Value = "0", Text = "-"},
                           new SelectListItem { Value = "1", Text = "1"},
                           new SelectListItem { Value = "2", Text = "2"},
                           new SelectListItem { Value = "3", Text = "3"},
                           new SelectListItem { Value = "4", Text = "4"},
                           new SelectListItem { Value = "5", Text = "5"},
                           new SelectListItem { Value = "6", Text = "6"},
                           new SelectListItem { Value = "7", Text = "7"},
                           new SelectListItem { Value = "8", Text = "8"},
                           new SelectListItem { Value = "9", Text = "9"}
                        },
        "Value",
        "Text",
        Model.Roster[i].Slot_NoDH

    ),
    new { @class = "lineupPick" }
  )

               <td align="center" style="display: none;">
                  @Html.DropDownListFor(
                    m => m.Roster[i].Posn_NoDH,
                    new SelectList(
                       new List<SelectListItem> {
                           new SelectListItem { Value = "0", Text = "-"},
                           new SelectListItem { Value = "2", Text = "c"},
                           new SelectListItem { Value = "3", Text = "1b"},
                           new SelectListItem { Value = "4", Text = "2b"},
                           new SelectListItem { Value = "5", Text = "3b"},
                           new SelectListItem { Value = "6", Text = "ss"},
                           new SelectListItem { Value = "7", Text = "lf"},
                           new SelectListItem { Value = "8", Text = "cf"},
                           new SelectListItem { Value = "9", Text = "rf"},
                           new SelectListItem { Value = "1", Text = "p"}
                        },
                    "Value",
                    "Text",
                    Model.Roster[i].Posn_NoDH 
                 ),
                 new { @class = "lineupPick" }
              )

               </td>
               <td align="center" style="display: none;">
                  @Html.DropDownListFor(
                    m => m.Roster[i].Slot_DH,
                    new SelectList(
                       new List<SelectListItem>  {
                           new SelectListItem { Value = "0", Text = "-"},
                           new SelectListItem { Value = "1", Text = "1"},
                           new SelectListItem { Value = "2", Text = "2"},
                           new SelectListItem { Value = "3", Text = "3"},
                           new SelectListItem { Value = "4", Text = "4"},
                           new SelectListItem { Value = "5", Text = "5"},
                           new SelectListItem { Value = "6", Text = "6"},
                           new SelectListItem { Value = "7", Text = "7"},
                           new SelectListItem { Value = "8", Text = "8"},
                           new SelectListItem { Value = "9", Text = "9"}
                        },
        "Value",
        "Text",
        Model.Roster[i].Slot_DH
     ),
     new { @class = "lineupPick" }
  )
               </td>
               <td align="center" style="display: none;">
                  @Html.DropDownListFor(
                    m => m.Roster[i].Posn_DH,
                    new SelectList(
                       new List<SelectListItem> {
                           new SelectListItem { Value = "0", Text = "-"},
                           new SelectListItem { Value = "2", Text = "c"},
                           new SelectListItem { Value = "3", Text = "1b"},
                           new SelectListItem { Value = "4", Text = "2b"},
                           new SelectListItem { Value = "5", Text = "3b"},
                           new SelectListItem { Value = "6", Text = "ss"},
                           new SelectListItem { Value = "7", Text = "lf"},
                           new SelectListItem { Value = "8", Text = "cf"},
                           new SelectListItem { Value = "9", Text = "rf"},
                           new SelectListItem { Value = "1", Text = "p"},
                           new SelectListItem { Value = "10", Text = "dh"}
                        },
        "Value",
        "Text",
        Model.Roster[i].Posn_DH
     ),
     new { @class = "lineupPick" }
  )
               </td>
               <td style="width:100px;">
                   @*@Html.CheckBoxFor(m => m.Roster[i].Remove)*@
                   @Html.ActionLink("Remove", "RemovePlayerFromTeam",
                      new { userName = userName, teamID = teamID, yearID = Model.Roster[i].year, teamTag = Model.Roster[i].teamTag, playerID = Model.Roster[i].pid })
                   @*Because of the [Route] attrib, this renders as:
                   href="/home/mvc/removeplayerfromteam/bobc/5004/2019/HOU/bregmal01"*@
                   @*Addl stuff needed on server to update UserPlayer table...*@
                   @Html.HiddenFor(m => m.Roster[i].pid, new { @class = "pid" })
                   @Html.HiddenFor(m => m.Roster[i].UserName)
                   @Html.HiddenFor(m => m.Roster[i].TeamName)
                   @Html.HiddenFor(m => m.Roster[i].UserTeamID)
               </td>
            </tr>
         }
      </table>



      <div>
         @*@Html.ActionLink("Add players", "SearchMulti", new { user = userName, team = teamName }, new { @class = "btn btn-primary" })*@
         <a href="#" id="btnAddPlayers" class="btn btn-primary" style="margin: 0px 0px 0px 0px;">Add Players</a>
         @*<p /><p /><input type="submit" id="btnSaveChanges" value="Save Changes" class="btn btn-primary" disabled="disabled" />*@
         @*<button type="button" id="btnCancel" class="btn btn-primary">Close</button>*@
         @Html.ActionLink("Close", "TeamList", new { user = userName }, new { @class = "btn btn-primary" })
         @*<a href="#" id="btnCancel" class="btn btn-primary">Close</a>*@
      </div>

   </div>

   <div id="dlgEditName" title="Edit Team Name & DH usage">

      Team Name: <input id="dlg_txtTeamName" type="text" placeholder="Rocket man"/>
      <br/>Uses DH at home: <input id="dlg_chkUsesDh" type="checkbox" />

   </div>

@*----------------------------------------------
This used to be SearchMulti
Idea is to put this in dialog.
----------------------------------------------*@

@*<div>
   <h2 style="margin: 0px 0px 35px 0px;">Search for players to add to @ViewData["team"]</h2>

   <p /><span class="label1"> Enter start of player's last name...</span>
   <input type="text" id="txtName" class="entry1" style="width:150px;" />

   <br /><span class="label1">Year: (1901 to 2020, required)</span>
   <input type="text" id="txtYear" name="txtYear" class="entry1" style="width:80px;" value="" />

   <br /><span class="label1">Team:</span>
   <select id="selTeam" name="selTeam" class="entry1" style="width:200px;">
      <option selected>All</option>
   </select>

   <br /><span class="label1">Position:</span>
   <select id="selPosn" name="selPosn" class="entry1">
      <option selected>All</option>
      <option>p</option>
      <option>c</option>
      <option>1b</option>
      <option>2b</option>
      <option>3b</option>
      <option>ss</option>
      <option>lf</option>
      <option>cf</option>
      <option>rf</option>
      <option>of</option>
      <option>dh</option>
   </select>

   <p /><button id="btnSearch" class="btn btn-primary">Search</button>
   <div id="dvResults" style="border: none; padding: 10px; margin:25px 0px 12px 0px;">
      Click 'Search' to find players
   </div>
   <p /><input id="errMsg" style="border:none; color:red; font-size:larger; font-weight:bold; width:600px;" value="" />

   <p /><input id="btnAddSelected" type="button" class="btn btn-primary" value="Add Selected Players" />
   @Html.ActionLink("Close", "EditTeam", new { user = ViewData["user"], team = ViewData["team"] }, new { @class = "btn btn-primary" })

   <br />
   <input id="hdnUserName" type="text" style="visibility:hidden" value="@ViewData["user"]" />
   <input id="hdnTeamName" type="text" style="visibility:hidden" value="@ViewData["team"]" />

</div>*@



@section Scripting {
   <script>
      $(document).ready(

         function () {
            //alert("In document.ready");

            //$("#btnCancel").on("click",
            //   function () {
            //      //alert("In btnCancel.Click");
            //      let ok = true;
            //      if (!$('#btnSaveChanges').prop('disabled')) {
            //         if (!confirm("Discard lineup changes and close?")) ok = false;
            //      }
            //      if (ok) {
            //         let user1 = $('#UserTeam_UserName').val();
            //         let url = bc.routePrefix + `Home/TeamList?user=${user1}`;
            //         //alert(`url=${url}`);
            //         window.location.href = url;
            //      }
            //   });

            $("#btnAddPlayers").on("click",
               function () {
                  bc_log("In btnAddPlayers.Click");
                  //let url = bc.routePrefix + `Home/SearchMulti?user=${user1}&team=${team1}`;
                  let userName = $('#txtUserName').val();
                  let teamID = $('#txtTeamID').val();
                  let teamName = $('#txtTeamName').val().trim().replace(' ', '_');
                  let url = bc.routePrefix + `home/mvc/searchmulti/${userName}/${teamID}/${teamName}`;
                  bc_log(`url=${url}`);
                  window.location.href = url;
               });


            $(".lineupPick").on("change",
               function () {
                  //alert("The select element was changed.");
                  $('#btnSaveChanges').prop('disabled', false);
                  //$('#btnAddPlayers').prop('disabled', true);
               });

            $('#btnEditName').click(
               function () {
                  $('#dlgEditName').dialog('open');
               });

            $('#dlgEditName').dialog({
               autoOpen: false,
               height: 200,
               width: 350,
               modal: true,
               buttons: {
                  'Save': function () {
                     bc_log('In Save');
                     PersistName();
                  },
                  'Cancel': function () {
                     $(this).dialog('close');
                  }
               },
               close: function () {
                  bc_log('Closing');
               },
               open: function () {
                  bc_log('In open');
                  $('#dlg_txtTeamName').val($('#txtTeamName').val());
                  $('#dlg_chkUsesDh').prop('checked', $('#chkUsesDh').prop('checked'));
               }
            });


            function PersistName() {
            // ---------------------------------------------
               let newName = $('#dlg_txtTeamName').val();
               bc_log('In PersistName, newName: ' + newName);
               $.get(
                  bc.routePrefix + 'home/mvc/upduserteamspecs',
                  {
                     userName: $('#txtUserName').val(),
                     teamID: $('#txtTeamID').val(),
                     teamName: newName,
                     usesDh: $('#dlg_chkUsesDh').prop('checked')
                  },
                  function (res) {
                     bc_log('In succeed function, res:' + res)
                     if (res == "ok") {
                        bc_log('res = ok');
                        $('#txtTeamName').val(newName);
                        $('#chkUsesDh').prop('checked', $('#dlg_chkUsesDh').prop('checked'));
                     }
                     else
                        alert(res);
                     $('#dlgEditName').dialog('close');
                     res = res1;
                  },
                  'text'
               );

            }


            // ---------------------------------------------------------
            // A nice agorism this, but I decided to not use it after all
            // and use a form/submit instead...
            // ---------------------------------------------------------
            //$('#btnSaveLineupNot').click(
            //   function () {
            //      table.find('tr').each(
            //         function (i, el) {
            //            let $tds = $(this).find('td'),
            //               playerId[i] = $tds.eq(0).text(),
            //               slotNoDh[i] = $tds.eq(1).text(),
            //               posnNoDh[i] = $tds.eq(2).text(),
            //               slotDh[i] = $tds.eq(3).text(),
            //               posnDh[i] = $tds.eq(4).text();
            //         });
            //      let data = {
            //         User:
            //         Team:
            //         PlayerId: playerId,
            //         SlotNoDh: slotNoDh,
            //         PosnNoDh: posnNoDh,
            //         SlotDh: slotDh,
            //         PosnDh: posnDh
            //      }
            //      $.post('Home/UpdateLineup', data,
            //         function () {
            //            alert('Lineup updated');
            //         }
            //      )

            //   });

            //--------------------------------------------
            //Functions copied from SearchMulti
            //--------------------------------------------

            //function buildRoster() {
            //// ---------------------------------------------------
            //   var rost = [];
            //   $("#currRoster tr").each(
            //      function () {
            //         bc_log("In .each()");
            //         let x = {
            //            playerName: $(this).find("input.playerName").first().val(),
            //            teamTag: $(this).find("input.teamTag").first().val(),
            //            year: $(this).find("input.year").first().val(),
            //            fieldingString: $(this).find("td.fieldingString").first().text(),
            //            pid: $(this).find("input.pid").first().val()
            //         }
            //         rost.push(x);
            //         bc_log(`Pushing: ${x.playerName} ${x.teamTag} ${x.year} ${x.fieldingString} ${x.pid}`);
            //      });
            //   return rost;
            //}


            //function buildTableFromRoster(rost) {
            //// -----------------------------------------------
            //   console.log("In buildTableFromRoster -------------------------------------")

            //   let html = ""
            //   let ix = 0;
            //   for (e of rost) {
            //      html += '<tr>';
            //      html += `<td><input class="playerName" id="Roster_${ix}__PlayerName" name="Roster[${ix}].PlayerName" readonly="readonly" style="width:120px; background-color:white; border:none;" type="text" value="${e.playerName}" /></td>`;
            //      html += `<td><input class="teamTag" id="Roster_${ix}__teamTag" name="Roster[${ix}].teamTag" readonly="readonly" style="width:80px; background-color:white; border:none;" type="text" value="${e.teamTag}" /></td>`;
            //      html += `<td align="center"><input class="year" id="Roster_${ix}__year" name="Roster[${ix}].year" readonly="readonly" style="width:80px; background-color:white; border:none;" type="text" value="${e.year}" /></td>`;
            //      html += `<td class="fieldingString" style="width:100px;">${e.fieldingString}</td>`;
            //      html += '<td>'
            //      html += '  <a href = "/home/mvc/removeplayerfromteam/bobc/Rocket%20Men/2020/ATL/acunaro01" > Remove</a>';
            //      html += `  <input class="pid" id="Roster_${ix}__pid" name="Roster[${ix}].pid" type="hidden" value="${e.pid}" />`;
            //      html += '</td>';
            //      html += '</tr>';
            //      ix++;
            //   }
            //   bc_log("html=" + html);
            //   return html;
            //}


            //$('#btnAddSelected').click(
            //   function () {
            //      console.log('In btnAddSelected.click ---------------------------------------');

            //   // Step 1: Build an array of the current roster
            //      let rost1 = buildRoster();
            //      for (e of rost1) bc_log(`After buildRoster: ${e.playerName} ${e.teamTag} ${e.year} ${e.fieldingString} ${e.pid}`);

            //   // Step 2: Add these newly selected players to the roster array...
            //      $('input.playerSelection:checked').each(
            //         function () {
            //            let yr = $(this).parent().parent().find("td.selYear").first().text(); alert(yr);
            //            let tm = $(this).parent().parent().find("td.selTeamTag").first().text();;
            //            let id = $(this).parent().parent().find("td.selPlayerID").first().text();
            //            let name = $(this).parent().parent().find("td.selName").first().text();
            //            let fldg = $(this).parent().parent().find("td.selFieldingString").first().text();

            //            bc_log(`In btnAddSelected.click: ${name} ${id} ${yr} ${tm} ${fldg}`)

            //         // Checking that the palyer/team/year is not already in the roster...
            //            let elt = rost1.find(e => e.pid == id && teamTag == tm && year == yr);
            //            if (!elt) {
            //               let x = { playerName: name, pid: id, year: yr, fieldingString: fldg, teamTag: tm };
            //               rost1.push(x);
            //               bc_log(`Pushing new player: ${x.playerName} ${x.teamTag} ${x.year} ${x.fieldingString} ${x.pid}`);
            //            }

            //         }
            //      );
            //      bc_log(`Roster size: ${rost1.length}`);

            //   // Step 3: Convert the whole roster array to <tr> and <td> tags and attach it to the table...
            //      let user1 = $('#hdnUserName').val();
            //      let team1 = $('#hdnTeamName').val();
            //      let content = buildTableFromRoster(rost1);

            //      bc_log(`content: ${content}`);

            //      $("#currRoster").html(content);
            //      bc_log('html=' + $("#currRoster").html());

            //   }

            //);


            //$('#txtYear').on('change',
            //   function () {
            //      console.log('In txtYear.change ----------------------------------------------');

            //      // First, validate the user's entry...
            //      let err = false;
            //      let yr = $(this).val();
            //      if (isNaN(yr))
            //         err = true;
            //      else {
            //         yr = parseInt(yr);
            //         if (yr < 1901 || yr > 2020) err = true;
            //      }
            //      if (err) {
            //         alert('Year must be a number between 1901 and 2020');
            //         $("#selTeam").html('<option selected value=All>All</option>');
            //         return;
            //      }
            //      console.log('Year is good: ' + yr);

            //      // Next, use ajax to get the dropdown list for the Team dropdown...
            //      $.get(
            //         bc.routePrefix + 'Home/GetTeamsForYear',
            //         { yr: yr },
            //         function (ret) {
            //            console.log('Ajax returned: ' + ret);
            //            let content = '<option selected value=All>All</option>';
            //            for (let t of ret) {
            //               content += `<option value=${t.Value}>${t.Text}</option>`;
            //            }
            //            $("#selTeam").html(content);
            //         },
            //         "json"
            //      );
            //   });


            //$('#btnSearch').click(function () {
            //   //var crit1 = $(this).attr('id');
            //   //$('#errMsg').css('display','none');
            //   let critName1 = $('#txtName').val();
            //   let critTeam1 = $('#selTeam').val();
            //   let critYear1 = $('#txtYear').val();
            //   let critPosn1 = $('#selPosn').val();
            //   let user1 = $('#hdnUserName').val();
            //   let team1 = $('#hdnTeamName').val();
            //   //alert('criteria=' + critName1 + ' bc.routePrefix=' + bc.routePrefix);

            //   if (critName1 == "All" && critTeam1 == "All" && critPosn1 == "All") {
            //      alert("You must specify at least name, team or position");
            //      return;
            //   }

            //   $.ajax({
            //      url: bc.routePrefix + 'Home/SearchMultiJson', type: "GET", dataType: "json",
            //      //These become the arg to the Action method.
            //      data: {
            //         critName: critName1,
            //         critTeam: critTeam1,
            //         critYear: critYear1,
            //         critPosn: critPosn1
            //      },
            //      success: function (data) {
            //         alert(JSON.stringify(data));
            //         //alert(JSON.stringify({ test: 'hello', quant: 12 })); So can be any object not just Json!
            //         //alert(data[0].PlayerName);
            //         content = '<h3>Matching Players...</h3>';
            //         //content += '<table id="tblMatching" border="1" cellpadding="5" cellspacing="0" style="border-collapse:collapse">';
            //         content += '<table id="tblMatching" class="tablefmt3">';

            //         content += '<tr>';
            //         content += '<th>Player Name</th>';
            //         content += '<th>MLB Team</th>';
            //         content += '<th>Year</th>';
            //         content += '<th>Positions</th>';
            //         content += '<th>Select</th>';
            //         //content += '<th></th>'; //player id
            //         content += '</tr>'

            //         let url;
            //         for (let p of data) {
            //            content += '<tr>';
            //            content += '<td class="selName">' + p.nameLast + '</td>';
            //            content += '<td>' + p.teamName + '</td>';
            //            content += '<td class="selYear">' + p.yearID + '</td>';
            //            content += '<td class="selFieldingString">' + p.FieldingString + '</td>';
            //            content += `<td><input type="checkbox" class="playerSelection" value="${p.playerID}"/></td>`;
            //            content += '<td class="selPlayerID" style="visibility:hidden">' + p.playerID + '</td>';
            //            content += '<td class="selTeamTag" style="visibility:hidden">' + p.teamID + '</td>';
            //            content += '<td style="visibility:hidden">' + p.ZPlayerID + '</td>';
            //            content += '</tr>';
            //         }
            //         content += "</table>";

            //         console.log("content: " + content);
            //         $('#dvResults').html(content);
            //      },
            //      error: function (xhr, status, error) {
            //         alert(xhr.responseText);
            //         alert(status);
            //         alert(error);
            //      }

            //   })

         });

   </script>
}


