@model BcxbTeamBldr.Models.UserPlayerListVM

@{
   string teamName = @Model.UserTeam.TeamName;
   string userName = @Model.UserTeam.UserName;
}
@using (Html.BeginForm("EditTeam", "Home", FormMethod.Post)) {

   <h2>Edit rosters and lineups</h2>
   <h5>
      User: @Html.TextBoxFor(
m => m.UserTeam.UserName,
new { @readonly = "readonly", style = "border:none; font-weight:bold;" })<br />
   </h5>

   <div style="font-weight:bold;">
      Team: @Html.TextBoxFor(
   m => m.UserTeam.TeamName,
   new { style = "font-weight:bold; margin: 0px 0px 15px 0px;" })
      <br />Uses DH at home: @Html.CheckBoxFor(
m => m.UserTeam.UsesDh)
   </div>

   <div class="shadowed-text">
      <em>
         @*You must enter default starting lineups for both DH and no-DH.*@
         @*The lineups can always be changed at game-time in Play-by-Play Baseball.*@
         Players may play any position, but if a the position is not listed in 'Positions',
         <br />then he's not qualified there and will be a defensive liability.
         <br />Batting order and fielding positions can be set at game-time in Play-by-Play Baseball.
      </em>
   </div>
   <p />

   <div>
      @if (Model.Roster.Count == 0) {
         <div style="color:red;">
            @teamName  <text>doesn't have any players yet.</text>
         </div>
      }
      else {
         <table class="tablefmt2" style="margin: 0px 0px 20px 0px;">
            <tr>
               <th align="left">Player Name</th>
               <th align="left">MLB Team</th>
               <th align="center">Year</th>
               <th align="left">Positions</th>
               <th width="70" align="center" style="display:none">Lineup<br />No DH</th>
               <th width="70" align="center" style="display: none">Position<br />No DH</th>
               <th width="70" align="center" style="display: none">Lineup<br />DH</th>
               <th width="70" align="center" style="display: none">Position<br />DH</th>
               <th width="70" align="center"></th>
            </tr>
            @for (var i = 0; i < Model.Roster.Count; i++) {
               <tr>
                  <td>@Html.TextBoxFor(m => m.Roster[i].PlayerName, new { @readonly = "readonly", style = "width:120px; background-color:white; border:none;" })</td>
                  <td>@Html.TextBoxFor(m => m.Roster[i].teamTag, new { @readonly = "readonly", style = "width:80px; background-color:white; border:none;" })</td>
                  <td align="center">@Html.TextBoxFor(m => m.Roster[i].year, new { @readonly = "readonly", style = "width:80px; background-color:white; border:none;" })</td>
                  <td>@Model.Roster[i].FieldingString</td>

                  <td align="center" style="display: none;">
                     @Html.DropDownListFor(
                       m => m.Roster[i].Slot_NoDH,
                       new SelectList(
                          //new List<string> { "-", "c", "1b" })
                          new List<SelectListItem>  {
                                             new SelectListItem { Value = "0", Text = "-"},
                              new SelectListItem { Value = "1", Text = "1"},
                              new SelectListItem { Value = "2", Text = "2"},
                              new SelectListItem { Value = "3", Text = "3"},
                              new SelectListItem { Value = "4", Text = "4"},
                              new SelectListItem { Value = "5", Text = "5"},
                              new SelectListItem { Value = "6", Text = "6"},
                              new SelectListItem { Value = "7", Text = "7"},
                              new SelectListItem { Value = "8", Text = "8"},
                              new SelectListItem { Value = "9", Text = "9"}
                           },
           "Value",
           "Text",
           Model.Roster[i].Slot_NoDH

       ),
       new { @class = "lineupPick" }
     )

                  <td align="center" style="display: none;">
                     @Html.DropDownListFor(
                       m => m.Roster[i].Posn_NoDH,
                       new SelectList(
                          new List<SelectListItem> {
                              new SelectListItem { Value = "0", Text = "-"},
                              new SelectListItem { Value = "2", Text = "c"},
                              new SelectListItem { Value = "3", Text = "1b"},
                              new SelectListItem { Value = "4", Text = "2b"},
                              new SelectListItem { Value = "5", Text = "3b"},
                              new SelectListItem { Value = "6", Text = "ss"},
                              new SelectListItem { Value = "7", Text = "lf"},
                              new SelectListItem { Value = "8", Text = "cf"},
                              new SelectListItem { Value = "9", Text = "rf"},
                              new SelectListItem { Value = "1", Text = "p"}
                           },
           "Value",
           "Text",
           Model.Roster[i].Posn_NoDH
        ),
        new { @class = "lineupPick" }
     )

                  </td>
                  <td align="center" style="display: none;">
                     @Html.DropDownListFor(
                       m => m.Roster[i].Slot_DH,
                       new SelectList(
                          new List<SelectListItem>  {
                              new SelectListItem { Value = "0", Text = "-"},
                              new SelectListItem { Value = "1", Text = "1"},
                              new SelectListItem { Value = "2", Text = "2"},
                              new SelectListItem { Value = "3", Text = "3"},
                              new SelectListItem { Value = "4", Text = "4"},
                              new SelectListItem { Value = "5", Text = "5"},
                              new SelectListItem { Value = "6", Text = "6"},
                              new SelectListItem { Value = "7", Text = "7"},
                              new SelectListItem { Value = "8", Text = "8"},
                              new SelectListItem { Value = "9", Text = "9"}
                           },
           "Value",
           "Text",
           Model.Roster[i].Slot_DH
        ),
        new { @class = "lineupPick" }
     )
                  </td>
                  <td align="center" style="display: none;">
                     @Html.DropDownListFor(
                       m => m.Roster[i].Posn_DH,
                       new SelectList(
                          new List<SelectListItem> {
                              new SelectListItem { Value = "0", Text = "-"},
                              new SelectListItem { Value = "2", Text = "c"},
                              new SelectListItem { Value = "3", Text = "1b"},
                              new SelectListItem { Value = "4", Text = "2b"},
                              new SelectListItem { Value = "5", Text = "3b"},
                              new SelectListItem { Value = "6", Text = "ss"},
                              new SelectListItem { Value = "7", Text = "lf"},
                              new SelectListItem { Value = "8", Text = "cf"},
                              new SelectListItem { Value = "9", Text = "rf"},
                              new SelectListItem { Value = "1", Text = "p"},
                              new SelectListItem { Value = "10", Text = "dh"}
                           },
           "Value",
           "Text",
           Model.Roster[i].Posn_DH
        ),
        new { @class = "lineupPick" }
     )
                  </td>
                  <td style="width:100px;">
                     @*@Html.CheckBoxFor(m => m.Roster[i].Remove)*@
                     @Html.ActionLink("Remove", "RemovePlayerFromTeam",
                        new { user = userName, team = teamName, playerID = Model.Roster[i].pid, yearID = Model.Roster[i].year, teamID = Model.Roster[i].teamTag })

                     @*Addl stuff needed on server to update UserPlayer table...*@
                     @Html.HiddenFor(m => m.Roster[i].pid)
                     @Html.HiddenFor(m => m.Roster[i].UserName)
                     @Html.HiddenFor(m => m.Roster[i].TeamName)
                  </td>
               </tr>
            }
         </table>
      }


      <div>
         @*@Html.ActionLink("Add players", "SearchMulti", new { user = userName, team = teamName }, new { @class = "btn btn-primary" })*@
         <a href="#" id="btnAddPlayers" style="margin: 0px 0px 20px 0px;">Add Players</a>
         <p /><p /><input type="submit" id="btnSaveChanges" value="Save Changes" class="btn btn-primary" disabled="disabled" />
         @*<button type="button" id="btnCancel" class="btn btn-primary">Close</button>*@
         @*@Html.ActionLink("Close", "TeamList", new { user = userName, team = teamName }, new { @class = "btn btn-primary" })*@
         <a href="#" id="btnCancel" class="btn btn-primary">Close</a>
      </div>

      <div style="margin:25px 0px 0px 0px;">
         <span class="errorMsg2">
            @Html.DisplayFor(m => m.UserTeam.StatusMsg)
         </span>
      </div>

   </div>
}

@*----------------------------------------------
This used to be SearchMulti
Idea is to put this in dialog.
----------------------------------------------*@

<div>
   <h2 style="margin: 0px 0px 35px 0px;">Search for players to add to @ViewData["team"]</h2>

   <p /><span class="label1"> Enter start of player's last name...</span>
   <input type="text" id="txtName" class="entry1" style="width:150px;" />

   <br /><span class="label1">Year: (1901 to 2020, required)</span>
   <input type="text" id="txtYear" name="txtYear" class="entry1" style="width:80px;" value="" />

   <br /><span class="label1">Team:</span>
   <select id="selTeam" name="selTeam" class="entry1" style="width:200px;">
      <option selected>All</option>
   </select>

   <br /><span class="label1">Position:</span>
   <select id="selPosn" name="selPosn" class="entry1">
      <option selected>All</option>
      <option>p</option>
      <option>c</option>
      <option>1b</option>
      <option>2b</option>
      <option>3b</option>
      <option>ss</option>
      <option>lf</option>
      <option>cf</option>
      <option>rf</option>
      <option>of</option>
      <option>dh</option>
   </select>

   <p /><button id="btnSearch" class="btn btn-primary">Search</button>
   <div id="dvResults" style="border: none; padding: 10px; margin:25px 0px 12px 0px;">
      Click 'Search' to find players
   </div>
   <p /><input id="errMsg" style="border:none; color:red; font-size:larger; font-weight:bold; width:600px;" value="" />

   <p /><input id="btnSubmit" type="button" class="btn btn-primary" value="Add Selected Players" />
   @Html.ActionLink("Close", "EditTeam", new { user = ViewData["user"], team = ViewData["team"] }, new { @class = "btn btn-primary" })

   <br />
   <input id="hdnUserName" type="text" style="visibility:hidden" value="@ViewData["user"]" />
   <input id="hdnTeamName" type="text" style="visibility:hidden" value="@ViewData["team"]" />

</div>



@section Scripting {
   <script>
      $(document).ready(

         function () {
            //alert("In document.ready");

            $("#btnCancel").on("click",
               function () {
                  //alert("In btnCancel.Click");
                  let ok = true;
                  if (!$('#btnSaveChanges').prop('disabled')) {
                     if (!confirm("Discard lineup changes and close?")) ok = false;
                  }
                  if (ok) {
                     let user1 = $('#UserTeam_UserName').val();
                     let url = bc.routePrefix + `Home/TeamList?user=${user1}`;
                     //alert(`url=${url}`);
                     window.location.href = url;
                  }
               });

            $("#btnAddPlayers").on("click",
               function () {
                  //alert("In btnAddPlayers.Click");
                  let ok = true;
                  if (!$('#btnSaveChanges').prop('disabled')) {
                     if (!confirm("Discard lineup changes and continue?")) ok = false;
                  }
                  if (ok) {
                     let user1 = $('#UserTeam_UserName').val().trim().replace(" ", "%20");;
                     let team1 = $('#UserTeam_TeamName').val().trim().replace(" ", "%20");;
                     //let url = bc.routePrefix + `Home/SearchMulti?user=${user1}&team=${team1}`;
                     let url = bc.routePrefix + `home/mvc/searchmulti/${user1}/${team1}`;
                     //alert(`url=${url}`);
                     window.location.href = url;
                  }
               });


            $(".lineupPick").on("change",
               function () {
                  //alert("The select element was changed.");
                  $('#btnSaveChanges').prop('disabled', false);
                  //$('#btnAddPlayers').prop('disabled', true);
               });

            // ---------------------------------------------------------
            // A nice agorism this, but I decided to not use it after all
            // and use a form/submit instead...
            // ---------------------------------------------------------
            //$('#btnSaveLineupNot').click(
            //   function () {
            //      table.find('tr').each(
            //         function (i, el) {
            //            let $tds = $(this).find('td'),
            //               playerId[i] = $tds.eq(0).text(),
            //               slotNoDh[i] = $tds.eq(1).text(),
            //               posnNoDh[i] = $tds.eq(2).text(),
            //               slotDh[i] = $tds.eq(3).text(),
            //               posnDh[i] = $tds.eq(4).text();
            //         });
            //      let data = {
            //         User:
            //         Team:
            //         PlayerId: playerId,
            //         SlotNoDh: slotNoDh,
            //         PosnNoDh: posnNoDh,
            //         SlotDh: slotDh,
            //         PosnDh: posnDh
            //      }
            //      $.post('Home/UpdateLineup', data,
            //         function () {
            //            alert('Lineup updated');
            //         }
            //      )

            //   });

            //--------------------------------------------
            //Functions copied from SearchMulti
            //--------------------------------------------

            $('#btnSubmit').click(
               function () {
                  //alert('In btnSubmit');
                  let pidList = '', tagList = '', yearList = '', delim = '';
                  $('input.playerSelection:checked').each(
                     function () {
                        //alert('element ' + ', id=' + this.value);
                        //alert(this.tagName);
                        //alert($(this).parent().parent().get(0).tagName);
                        let yr = $(this).parent().parent().find("td.selectedYear").first().text(); alert(yr);
                        let tm = $(this).parent().parent().find("td.selectedTeam").first().text();;
                        let id = $(this).parent().parent().find("td.selectedPlayer").first().text();

                        //--------------------------------------------------------
                        //In here, find player in grid, if not there, append a < tr > with the player data,
                        //   including 'Remove'.
                        //--------------------------------------------------------
                        //Question: Do we really need ID and Name (with uindex)???

                        //<td><input id="Roster_0__PlayerName" name="Roster[0].PlayerName" readonly="readonly" style="width:120px; background-color:white; border:none;" type="text" value="Acuna" /></td>
                        //<td><input id="Roster_0__teamTag" name="Roster[0].teamTag" readonly="readonly" style="width:80px; background-color:white; border:none;" type="text" value="ATL" /></td>
                        //<td align="center"><input data-val="true" data-val-number="The field year must be a number." data-val-required="The year field is required." id="Roster_0__year" name="Roster[0].year" readonly="readonly" style="width:80px; background-color:white; border:none;" type="text" value="2020" /></td>
                        //<td>cf,rf</td>
                        //<td style="width:100px;">
                        //   <a href="/home/mvc/removeplayerfromteam/bobc/Rocket%20Men/2020/ATL/acunaro01">Remove</a>
                        //   <input id="Roster_0__pid" name="Roster[0].pid" type="hidden" value="acunaro01" />
                        //</td>

                        pidList += delim + id;
                        tagList += delim + tm;
                        yearList += delim + yr;
                        delim = ',';
                        alert(`pidList: ${pidList} tagList: ${tagList} yearList: ${yearList}`);
                     });
                  //alert(`idList=|${idList}|`);
                  let user1 = $('#hdnUserName').val();
                  let team1 = $('#hdnTeamName').val();
                  let url = bc.routePrefix + `Home/AddPlayerToTeamMulti?user=${user1}&team=${team1}&pidList=${pidList}&tagList=${tagList}&yearList=${yearList}`;
                  //alert(`url=${url}`);
                  window.location.href = url;

               }
            );


            $('#txtYear').on('change',
               function () {
                  console.log('In change event');

                  // First, validate the user's entry...
                  let err = false;
                  let yr = $(this).val();
                  if (isNaN(yr))
                     err = true;
                  else {
                     yr = parseInt(yr);
                     if (yr < 1901 || yr > 2020) err = true;
                  }
                  if (err) {
                     alert('Year must be a number between 1901 and 2020');
                     $("#selTeam").html('<option selected value=All>All</option>');
                     return;
                  }
                  console.log('Year is good: ' + yr);

                  // Next, use ajax to get the dropdown list for the Team dropdown...
                  $.get(
                     bc.routePrefix + 'Home/GetTeamsForYear',
                     { yr: yr },
                     function (ret) {
                        console.log('Ajax returned: ' + ret);
                        let content = '<option selected value=All>All</option>';
                        for (let t of ret) {
                           content += `<option value=${t.Value}>${t.Text}</option>`;
                        }
                        $("#selTeam").html(content);
                     },
                     "json"
                  );
               })


            $('#btnSearch').click(function () {
               //var crit1 = $(this).attr('id');
               //$('#errMsg').css('display','none');
               let critName1 = $('#txtName').val();
               let critTeam1 = $('#selTeam').val();
               let critYear1 = $('#txtYear').val();
               let critPosn1 = $('#selPosn').val();
               let user1 = $('#hdnUserName').val();
               let team1 = $('#hdnTeamName').val();
               //alert('criteria=' + critName1 + ' bc.routePrefix=' + bc.routePrefix);

               if (critName1 == "All" && critTeam1 == "All" && critPosn1 == "All") {
                  alert("You must specify at least name, team or position");
                  return;
               }

               $.ajax({
                  url: bc.routePrefix + 'Home/SearchMultiJson', type: "GET", dataType: "json",
                  //These become the arg to the Action method.
                  data: {
                     critName: critName1,
                     critTeam: critTeam1,
                     critYear: critYear1,
                     critPosn: critPosn1
                  },
                  success: function (data) {
                     alert(JSON.stringify(data));
                     //alert(JSON.stringify({ test: 'hello', quant: 12 })); So can be any object not just Json!
                     //alert(data[0].PlayerName);
                     content = '<h3>Matching Players...</h3>';
                     //content += '<table id="tblMatching" border="1" cellpadding="5" cellspacing="0" style="border-collapse:collapse">';
                     content += '<table id="tblMatching" class="tablefmt3">';

                     content += '<tr>';
                     content += '<th>Player Name</th>';
                     content += '<th>MLB Team</th>';
                     content += '<th>Year</th>';
                     content += '<th>Positions</th>';
                     content += '<th>Select</th>';
                     //content += '<th></th>'; //player id
                     content += '</tr>'

                     let url;
                     for (let p of data) {
                        content += '<tr>';
                        content += '<td>' + p.nameLast + '</td>';
                        content += '<td>' + p.teamName + '</td>';
                        content += `<td class="selectedYear">` + p.yearID + '</td>';
                        content += '<td>' + p.FieldingString + '</td>';
                        content += `<td><input type="checkbox" class="playerSelection" value="${p.playerID}"/></td>`;
                        content += `<td class="selectedPlayer" style="visibility:hidden">` + p.playerID + '</td>';
                        content += `<td class="selectedTeam" style="visibility:hidden">` + p.teamID + '</td>';
                        content += '<td style="visibility:hidden">' + p.ZPlayerID + '</td>';
                        content += '</tr>';
                     }
                     content += "</table>";

                     alert(content);
                     $('#dvResults').html(content);
                  },
                  error: function (xhr, status, error) {
                     alert(xhr.responseText);
                     alert(status);
                     alert(error);
                  }

               })

            })

         });

   </script>
}


